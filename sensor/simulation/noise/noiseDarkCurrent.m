function darkCurrentImage = noiseDarkCurrent(ISA)
%Obsolete
%
%  darkCurrentImage = noiseDarkCurrent(ISA)
%
% PURPOSE:
%    Calculate the current image generated by the dark current.  The dark
%    current image units are Amps.
%
%Programming notes:
%   For legacy reasons, many of the functions return current.  This is one
%   example routine.  It could return voltage (or even electrons) to make
%   the computations simpler to read.  All of the noiseXXX routines could
%   be changed to conform to this.
%   This routine should not add in the dark current noise.  The noise is
%   computed as part of the noiseShot calculation, which takes the sum of
%   the mean signal and the dark signal together.  The shot noise is
%   computed from this total.  We don't compute signal noise and and dark
%   signal noise separately.
evalin('caller','mfilename')
error('Obsolete');
return;
isaSize = sensorGet(ISA,'size');
% If this is a test, with exposure duration 0, then we want to simply
% return 0 dark current and dark current noise.
if sensorGet(ISA,'exposureduration') == 0
    darkCurrentImage = zeros(isaSize);
    return;
end
PIXEL = sensorGet(ISA,'pixel');
theDarkElectrons = pixelGet(PIXEL,'darkelectrons');
% We no longer return a noisy dark current image.  Do remember, thought,
% that the noise is Poisson in electrons (though not in other scalings,
% such as current).
% theElectronNoise = (sqrt(darkElectrons) .* randn(isaSize)) + darkElectrons;
% This code removed because we add the noise later in shotNoise
% Find the factors that convert the electrons into a current by finding
% current 2 voltage factor, and then voltage to electron.  Combine.
c2e = sensorCurrent2Volt(ISA)/pixelGet(PIXEL,'conversiongain');
% Now, put the electrons into the required darkCurrent form.
darkCurrentImage = theDarkElectrons/c2e;
% We should allow a spatial nonuniformity across the dark current image.
% We could put an edit box on the Sensor image window and figure out what
% the variance should be.
return;
