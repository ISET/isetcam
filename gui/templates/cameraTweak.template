function [oi, sensor, ip] = cameraTweak(varargin)
%% 
% This file is copied into the local data store for each user
% so that they can add their own customization code to the optics, sensor, and ip
% of the camera they have begun to design in the UI.
%
% Or, they can also directly load one from scratch here, over-riding whatever is
% passed in, by simply assigning the one they load to the appropriate output variable name.
%
% Once this template is copied to the local store, changes to it will not persist,
% as it will be copied over again if it is missing. So make persistent changes to the .template
% file, not the .m file that it is copied into.
%%

%% In general, the cameraDesigner application will pass something for oi, sensor, and ip
% but this allows us to be more flexible
% If one of those does not exist in the environment to pass in, the varargin code
% causes a default to be created, which can then be customized in code.
%%

%% You can also hard-code an image folder here, if you don't want to specify one
% each time you run an experiment. Otherwise it will be prompted when you use Evaluate...
%%

varargin = ieParamFormat(varargin);

p = inputParser;

p.addParameter('oi',oiCreate(),@(x)(isequal(class(x), 'struct')));
p.addParameter('sensor',sensorCreate(),@(x)(isequal(class(x), 'struct')));
p.addParameter('ip',ipCreate(),@(x)(isequal(class(x), 'struct')));
p.addParameter('imageFolder',"",@ischar); % or string?
p.parse(varargin{:});

oi   = p.Results.oi;
sensor   = p.Results.sensor;
ip = p.Results.ip;

% Put your custom code here to modifiy 
% your optics (oi.optics)
% your sensor (sensor)
% and your image processor (ip)
% Whatever is in those three structures when this function exits
% will be used in the evaluation process